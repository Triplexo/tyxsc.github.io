[{"categories":["Books"],"contents":"费曼学习法 简介 高付出 的学习中，我们有时得到的却是 低效能 ；不具备输出(应用)这些知识的能力。\n费曼学习法是一种顶级的思维方式，它能帮助我们真正掌握一门知识，揭示了学习和思考的本质。\n核心要素 concept 确立要学习的目标。列出自己想要了解的知识点。\nconcept 理解你要学习的对象。准备和筛选相关的资料。\nteach 以教代学，用输出代替输入。\nreview 回顾和反思。\nsimplify 实现知识的简化和吸收。\n思维模式 好的思维模式需要正反馈。\n输出加快思考的成熟。\n思考可以量化。\n主要步骤 确立一个学习目标 ​\t学习不再是 被动服从 和由 功利驱动 的 \u0026ldquo;输入\u0026rdquo;，而是我们自觉甚至是开心地实施有意识的 主动学习，也就是以 \u0026ldquo;输出\u0026rdquo; 为载体的 \u0026ldquo;有选择的输入\u0026rdquo;。\n追求四个方面进步 ​\t目标明确的学习可以极大地改变一个人的思维，对于训练和改进 我们的思维方式而言，这是一个必不可少的基础。\n好处\n开放性思维\n批判性思维\n逻辑性思维\n清晰凝练的表达力\n聚焦目标 ​\t抓住学习的黄金时间，将全部的精力聚焦于选定的目标 之上，心无旁骛地把这门知识/技能学通、学精和化为己用\n好处\n思维更加清晰。\n行动更有针对性。\n​\n如何寻找正确方向 对自己提出关键问题\n把 最重要的那件事 变成自己的方向\n如何找到真正的兴趣 ​\t深入分析那些自己喜欢的领域，查阅相关的资料，然后进行初步的尝试，从中找到自己学习的对象。\n和目标建立 \u0026ldquo;强联系\u0026rdquo; 论证学习这门知识/做这件事的必要性\n确认规划与目标的实质联系\n学习的舒适区两个标准\n符合自身的兴趣。\n在自己能力范围内的合理目标。符合自身能力。\n规划一条高效学习之路 留出锁定最重要的目标时间\n留出做正确规划的时间\n留出调整目标和规划的时间\n目标原则 全面性原则：制定目标时要有全局和整体观念。\n重点性原则：制定目标要有侧重点、针对性。\n挑战性原则：制定的目标要能挖掘和激发自己的潜能。\n可行性原则：制定的目标要切实可行。\n可调性原则：制定的目标要具有一定的可调性，随着环境和内外条 件的变化，我们能对学习的目标进行必要的调整，适应变化。在实施过程中留有余地。\n理解学习的知识 ​\t我们要学习的知识和概念进行归类对比，系统地理解这些内 容，建立筛选和学习的原则。\n归类和对比知识的来源 如何将知识有逻辑地系统化 明白自己学习的是什么。\n拥有一个足够宽阔的视野。\n建立最可能客观科学的逻辑。\n筛选和留下最可靠的知识 筛选知识方法论 清晰知道自己的短板。\n重点学习哪方面的内容。\n保留可靠的知识 找出那些符合实际需求相匹配的知识。\n屏蔽来源不可靠的知识。\n小心对待差异化的知识。\n用对比的方式挑选和分辨知识。\n","permalink":"https://tyxsc.github.io/website/blog/books/feynman/chapter-1/","tags":["高效学习"],"title":"费曼学习法"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet,\nconsetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam\nnonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd\n","permalink":"https://tyxsc.github.io/website/about/about/","tags":null,"title":"About Me"},{"categories":["Android And Gmaing"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList List item List item List item List item List item Unordered List List item List item List item List item List item Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let\u0026#39;s throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote This is a blockquote example.\nInline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\nTables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\nMarkdown Less Pretty Still renders nicely 1 2 3 Image Youtube video ","permalink":"https://tyxsc.github.io/website/blog/test/","tags":["Photos","Game","React","Python","New"],"title":"How To Use Checklists To Improve Your UX"},{"categories":null,"contents":"本地环境搭建 minikube 安装教程 如下命令将自动使用阿里云服务来支持minikube的环境配置\nminikube start --image-mirror-country=\u0026#39;cn\u0026#39; minikube 提供了非常多的配置参数，\n常用配置参数如下\n--driver=*** 从1.5.0版本开始，Minikube缺省使用系统优选的驱动来创建Kubernetes本地环境，比如您已经安装过Docker环境，minikube 将使用 docker 驱动 --cpus=2: 为minikube虚拟机分配CPU核数 --memory=2048mb: 为minikube虚拟机分配内存数 --registry-mirror=*** 为了提升拉取Docker Hub镜像的稳定性，可以为 Docker daemon 配置镜像加速，参考阿里云镜像服务 --kubernetes-version=***: minikube 虚拟机将使用的 kubernetes 版本 安装命令：\nminikube start --image-mirror-country=\u0026#39;cn\u0026#39; --registry-mirror=\u0026#39;https://9sznap3j.mirror.aliyuncs.com\u0026#39; 启动：\nminikube dashboard 核心概念 Pod ​\tPod 是 Kubernetes 的一个最小调度以及资源单元。用户可以通过 Kubernetes 的 Pod API 生产一个 Pod，让 Kubernetes 对这个 Pod 进行调度，也就是把它放在某一个 Kubernetes 管理的节点上运行起来。一个 Pod 简单来说是对一组容器的抽象，它里面会包含一个或多个容器。\n最小的调度以及资源单元 由一个或者多个容器组成 定义容器运行的方式（Command 、环境变量等） 提供给容器共享的运行环境（网络、进程空间） Volume ​\tVolume 就是卷的概念，它是用来管理 Kubernetes 存储的，是用来声明在 Pod 中的容器可以访问文件目录的，一个卷可以被挂载在 Pod 中一个或者多个容器的指定路径下面。\n声明在 Pod 中的容器可访问的文件目录 可以被挂载在 Pod 中一个（或者多个）容器的指定路径下 支持多种后端存储的抽象 本地、分布式、云存储 Deployment ​\tDeployment 是在 Pod 这个抽象上更为上层的一个抽象，它可以定义一组 Pod 的副本数目、以及这个 Pod 的版本。一般大家用 Deployment 这个抽象来做应用的真正的管理，而 Pod 是组成 Deployment 最小的单元。\n定义一组 Pod 的副本数目、版本等 通过控制器（Controller）维持 Pod 的数目 自动恢复失败的 Pod 通过控制器以指定的策略控制版本 滚动升级、重新生成、回滚等 Service ​\tService 提供了一个或者多个 Pod 实例的稳定访问地址。\n提供访问一个或者多个 Pod 实例的稳定访问地址 支持多种访问方式时间 ClusterIP NodePort LoadBalancer Namespace ​\tNamespace 是用来做一个集群内部的逻辑隔离的，它包括鉴权、资源管理等。Kubernetes 的每个资源，比如刚才讲的 Pod、Deployment、Service 都属于一个 Namespace，同一个 Namespace 中的资源需要命名的唯一性，不同的 Namespace 中的资源可以重名。\n一个集群内部的逻辑隔离机制（鉴权、资源额度） 每个资源都属于一个 Namespace 同一个 Namespace 中的资源命名唯一 不同的 Namespace 中的资源可重名 参考 李响 从零开始入门 K8s: 详解 K8s 核心概念\n","permalink":"https://tyxsc.github.io/website/blog/k8s/local-environment/","tags":null,"title":""}]